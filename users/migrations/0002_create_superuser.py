# Generated by Django X.X...
from django.db import migrations
from django.contrib.auth import get_user_model
import os

def create_superuser(apps, schema_editor):
    """
    Creates a superuser if one doesn't already exist.
    Credentials are pulled from environment variables.
    """
    # Get credentials from environment variables
    username = os.environ.get('DJANGO_SUPERUSER_USERNAME')
    email = os.environ.get('DJANGO_SUPERUSER_EMAIL')
    password = os.environ.get('DJANGO_SUPERUSER_PASSWORD')

    # --- Start of corrected logic ---
    if not username:
        print("Superuser creation skipped: DJANGO_SUPERUSER_USERNAME is not set.")
        return

    if not password:
        print("Superuser creation skipped: DJANGO_SUPERUSER_PASSWORD is not set.")
        return

    # Get the User model. This is the modern, recommended way.
    User = get_user_model()

    # Check if a user with this username already exists to avoid an error
    if User.objects.filter(username=username).exists():
        print(f"Superuser creation skipped: User '{username}' already exists.")
        return

    # Create the superuser
    User.objects.create_superuser(
        username=username,
        email=email, # Django's create_superuser handles email=None gracefully
        password=password
    )
    print(f"Superuser '{username}' created successfully.")
    # --- End of corrected logic ---


class Migration(migrations.Migration):

    dependencies = [
        # Make sure this depends on the latest migration of your 'auth' app
        # and the initial migration of the app this file is in.
        ('auth', '0012_alter_user_first_name_max_length'), # Example, check your actual auth migrations
        ('users', '0001_initial'), # Replace 'myapp' with your app name
    ]

    operations = [
        migrations.RunPython(create_superuser),
    ]
